1: Utilizar o algorítmo da cadeia máxima como limite para o algorítmo.
    montar um grafo conexo onde cada vértice tem apenas suas 2 maiores arestas.
    Assim garantimos um limite inferior.


2: Otimizar para folhas
    Fazer uma chamada com a fola de header. Após isso retirar a folha do gráfico.
    --Melhorei, agora eu apenas removo a ligação entre o galho e o grafo e adiciono o "nó do galho" 
    --Assim, caso caminho máximo esteja dentro do galho eu não o perco.
    --Executei. Graph.Clean()
    Admitir que os nós do galho estejam em contato com outras folhas.
    Realimentar método até que não limpe mais nada.


3: Identificar se existe ciclo.
    Se não existir rodar o caminho máximo em uma árvore.
    Se existir, retirar a menor aresta dentre todos os ciclos. Identificar novamente.
    --Nodei que daria merda. A menor aresta ainda pode ser utilizada se a soma das outras arestas for menor que ela.
    --Caso menor aresta positiva ou não tenham outras 2 arestas negativas pode funcionar.
    Posso verificar se existe ciclo que só é ligado em um ponto e substitui-lo por vértice
    correspondente ao meior valor possível.
    Posso verificar se existe ciclo ligado em apenas dois pontos e substitui-lo por um vértice correspondente ao
    maior caminho interno, além de um vertice em cada extremidade correspondente ao maior valor possível dentro daquele ciclo.


4: adicionar timer de execução.
